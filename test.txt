get item('danh cho nguoi lon'): 
request:
class Autogenerated {
  String extension;
  String perspective;
  String section;
  String classUri;
  int hideInstances;
  String filter;
  int offset;
  int limit;
  String selected;

  Autogenerated(
      {this.extension,
      this.perspective,
      this.section,
      this.classUri,
      this.hideInstances,
      this.filter,
      this.offset,
      this.limit,
      this.selected});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    extension = json['extension'];
    perspective = json['perspective'];
    section = json['section'];
    classUri = json['classUri'];
    hideInstances = json['hideInstances'];
    filter = json['filter'];
    offset = json['offset'];
    limit = json['limit'];
    selected = json['selected'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['extension'] = this.extension;
    data['perspective'] = this.perspective;
    data['section'] = this.section;
    data['classUri'] = this.classUri;
    data['hideInstances'] = this.hideInstances;
    data['filter'] = this.filter;
    data['offset'] = this.offset;
    data['limit'] = this.limit;
    data['selected'] = this.selected;
    return data;
  }
}
header: Cookie
Accept:application/json, text/javascript, */*; q=0.01
X-Requested-With: XMLHttpRequest
VD: http://aigle.blife.ai/taoItems/Items/getOntologyData?extension=taoItems&perspective=items&section=manage_items&classUri=http://aigle.blife.ai/Aigle.rdf%23i1603178474379329&hideInstances=0&filter=*&offset=0&limit=30&selected=undefined
Response:
class Autogenerated {
	Tree tree;
	Permissions permissions;

	Autogenerated({this.tree, this.permissions});

	Autogenerated.fromJson(Map<String, dynamic> json) {
		tree = json['tree'] != null ? new Tree.fromJson(json['tree']) : null;
		permissions = json['permissions'] != null ? new Permissions.fromJson(json['permissions']) : null;
	}

	Map<String, dynamic> toJson() {
		final Map<String, dynamic> data = new Map<String, dynamic>();
		if (this.tree != null) {
      data['tree'] = this.tree.toJson();
    }
		if (this.permissions != null) {
      data['permissions'] = this.permissions.toJson();
    }
		return data;
	}
}

class Tree {
	String data;
	String type;
	Attributes attributes;
	String state;
	List<Children> children;
	int count;

	Tree({this.data, this.type, this.attributes, this.state, this.children, this.count});

	Tree.fromJson(Map<String, dynamic> json) {
		data = json['data'];
		type = json['type'];
		attributes = json['attributes'] != null ? new Attributes.fromJson(json['attributes']) : null;
		state = json['state'];
		if (json['children'] != null) {
			children = new List<Children>();
			json['children'].forEach((v) { children.add(new Children.fromJson(v)); });
		}
		count = json['count'];
	}

	Map<String, dynamic> toJson() {
		final Map<String, dynamic> data = new Map<String, dynamic>();
		data['data'] = this.data;
		data['type'] = this.type;
		if (this.attributes != null) {
      data['attributes'] = this.attributes.toJson();
    }
		data['state'] = this.state;
		if (this.children != null) {
      data['children'] = this.children.map((v) => v.toJson()).toList();
    }
		data['count'] = this.count;
		return data;
	}
}

class Attributes {
	String id;
	String class;
	String dataUri;
	Null dataClassUri;

	Attributes({this.id, this.class, this.dataUri, this.dataClassUri});

	Attributes.fromJson(Map<String, dynamic> json) {
		id = json['id'];
		class = json['class'];
		dataUri = json['data-uri'];
		dataClassUri = json['data-classUri'];
	}

	Map<String, dynamic> toJson() {
		final Map<String, dynamic> data = new Map<String, dynamic>();
		data['id'] = this.id;
		data['class'] = this.class;
		data['data-uri'] = this.dataUri;
		data['data-classUri'] = this.dataClassUri;
		return data;
	}
}

class Children {
	String data;
	String type;
	Attributes attributes;
	String state;
	int count;

	Children({this.data, this.type, this.attributes, this.state, this.count});

	Children.fromJson(Map<String, dynamic> json) {
		data = json['data'];
		type = json['type'];
		attributes = json['attributes'] != null ? new Attributes.fromJson(json['attributes']) : null;
		state = json['state'];
		count = json['count'];
	}

	Map<String, dynamic> toJson() {
		final Map<String, dynamic> data = new Map<String, dynamic>();
		data['data'] = this.data;
		data['type'] = this.type;
		if (this.attributes != null) {
      data['attributes'] = this.attributes.toJson();
    }
		data['state'] = this.state;
		data['count'] = this.count;
		return data;
	}
}

class Attributes {
	String id;
	String class;
	String dataUri;
	String dataClassUri;

	Attributes({this.id, this.class, this.dataUri, this.dataClassUri});

	Attributes.fromJson(Map<String, dynamic> json) {
		id = json['id'];
		class = json['class'];
		dataUri = json['data-uri'];
		dataClassUri = json['data-classUri'];
	}

	Map<String, dynamic> toJson() {
		final Map<String, dynamic> data = new Map<String, dynamic>();
		data['id'] = this.id;
		data['class'] = this.class;
		data['data-uri'] = this.dataUri;
		data['data-classUri'] = this.dataClassUri;
		return data;
	}
}

class Permissions {
	List<Null> supportedRights;

	Permissions({this.supportedRights});

	Permissions.fromJson(Map<String, dynamic> json) {
		if (json['supportedRights'] != null) {
			supportedRights = new List<Null>();
			json['supportedRights'].forEach((v) { supportedRights.add(new Null.fromJson(v)); });
		}
	}

	Map<String, dynamic> toJson() {
		final Map<String, dynamic> data = new Map<String, dynamic>();
		if (this.supportedRights != null) {
      data['supportedRights'] = this.supportedRights.map((v) => v.toJson()).toList();
    }
		return data;
	}
}